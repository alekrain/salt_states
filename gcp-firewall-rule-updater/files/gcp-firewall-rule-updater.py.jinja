#!/usr/bin/env python
# ======================================================================
# Python Source File
#
# NAME: gcp_fw_rule_updater.py
# AUTHOR:  Alek Tant
# DATE  : 2019.04.06
#
# PURPOSE: Update a GCP firewall rule based on IP from DNS.

import logging
from logging.handlers import WatchedFileHandler
import re
from socket import gethostbyname
from time import sleep
from googleapiclient.discovery import build


log = logging.basicConfig(filename='/var/log/gcp-firewall-rule-updater.log',
                          format='%(asctime)s [%(name)s][%(levelname)s][%(process)d] %(message)s',
                          level=logging.INFO,
                          handlers=WatchedFileHandler)
log = logging.getLogger(__name__)


def get_domain_ip(domain_name):
    current_ip = gethostbyname(domain_name)
    if re.search(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', current_ip):
        return current_ip
    else:
        log.critical('Could not find current IP for {0}: {1}'.format(domain_name, current_ip))
        raise Exception()


def get_rule_ip(project, rule):
    # Using Application Default Credentials. This requires running from an instance inside GCP that has the proper
    # role permissions
    compute = build('compute', 'v1')
    rule_request = compute.firewalls().get(project=project, firewall=rule)
    rule_data = rule_request.execute()
    source_ranges = rule_data['sourceRanges']
    log.info('Rule Source Ranges: {0}'.format(source_ranges))
    return source_ranges


def update_fw_rule(project, rule, ip, id=None):
    def _wait_for_operation(compute, project, operation):
        log.info('Waiting for operation to finish...')
        while True:
            result = compute.globalOperations().get(project=project, operation=operation).execute()
            if result['status'] == 'DONE':
                if 'error' in result:
                    raise Exception(result['error'])
                return result
            else:
                sleep(1)

    body = {'sourceRanges': [ip]}
    compute = build('compute', 'v1')
    request = compute.firewalls().patch(project=project, firewall=rule, body=body)
    resp = request.execute()
    if 'kind' in resp.keys() and resp['kind'] == 'compute#operation':
        _wait_for_operation(compute=compute, project=project, operation=resp['name'])
        log.info('Rule {0} has been successfully updated'.format(rule))
    else:
        log.critical('Failed to update the rule {0}! No status key was found in the API response'.format(rule))
        raise Exception()


if __name__ == '__main__':
    project = '{{ project }}'
    rule = '{{ rule }}'
    domain_name = '{{ domain }}'

    while True:
        current_rule_sources = get_rule_ip(project=project, rule=rule)
        domain_ip = get_domain_ip(domain_name)
        if domain_ip not in current_rule_sources:
            log.warning('The domain IP of {0} was not found in {1}. Updating the firewall rule {2}'.format(
                        domain_ip, current_rule_sources, rule))
            update_fw_rule(project=project, rule=rule, ip=domain_ip)
        else:
            log.info('Found IP {0} already in the firewall rule. Making no changes.'.format(domain_ip))
        sleep(600)
